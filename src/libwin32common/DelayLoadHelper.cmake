# DelayLoadHelper macros.
MACRO(SET_DELAYLOAD_EXTLIB_FLAGS)
IF(MSVC)
	UNSET(DL_DLLS)
	UNSET(DL_DEBUG_DLLS)
	UNSET(DL_RELEASE_DLLS)

	IF(NOT USE_INTERNAL_ZLIB OR USE_INTERNAL_ZLIB_DLL)
		SET(DL_DLLS ${DL_DLLS} zlib1)
	ENDIF(NOT USE_INTERNAL_ZLIB OR USE_INTERNAL_ZLIB_DLL)
	IF(NOT USE_INTERNAL_PNG OR USE_INTERNAL_PNG_DLL)
		SET(DL_DLLS ${DL_DLLS} libpng16)
	ENDIF(NOT USE_INTERNAL_PNG OR USE_INTERNAL_PNG_DLL)
	IF(NOT USE_INTERNAL_XML OR USE_INTERNAL_XML_DLL)
		# PugiXML uses a different postfix scheme.
		SET(DL_DEBUG_DLLS ${DL_DLLS} pugixml_d)
		SET(DL_RELEASE_DLLS ${DL_DLLS} pugixml)
	ENDIF(NOT USE_INTERNAL_XML OR USE_INTERNAL_XML_DLL)
	IF(NOT USE_INTERNAL_ZSTD OR USE_INTERNAL_ZSTD_DLL)
		SET(DL_DLLS ${DL_DLLS} zstd)
	ENDIF(NOT USE_INTERNAL_ZSTD OR USE_INTERNAL_ZSTD_DLL)
	IF(NOT USE_INTERNAL_LZ4 OR USE_INTERNAL_LZ4_DLL)
		SET(DL_DLLS ${DL_DLLS} lz4)
	ENDIF(NOT USE_INTERNAL_LZ4 OR USE_INTERNAL_LZ4_DLL)
	IF(NOT USE_INTERNAL_LZO OR USE_INTERNAL_LZO_DLL)
		SET(DL_DLLS ${DL_DLLS} minilzo)
	ENDIF(NOT USE_INTERNAL_LZO OR USE_INTERNAL_LZO_DLL)
	IF(NOT USE_INTERNAL_MINIZIP OR USE_INTERNAL_MINIZIP_DLL)
		SET(DL_DLLS ${DL_DLLS} minizip)
	ENDIF(NOT USE_INTERNAL_MINIZIP OR USE_INTERNAL_MINIZIP_DLL)
	IF(NOT USE_INTERNAL_FMT OR USE_INTERNAL_FMT_DLL)
		SET(DL_DLLS ${DL_DLLS} fmt-11)
	ENDIF(NOT USE_INTERNAL_FMT OR USE_INTERNAL_FMT_DLL)

	SET(DL_DEBUG_FLAGS "/ignore:4199")
	SET(DL_RELEASE_FLAGS "/ignore:4199")
	FOREACH(_dll ${DL_DLLS})
		SET(DL_DEBUG_FLAGS "${DL_DEBUG_FLAGS} /DELAYLOAD:${_dll}d.dll")
		SET(DL_RELEASE_FLAGS "${DL_RELEASE_FLAGS} /DELAYLOAD:${_dll}.dll")
	ENDFOREACH()
	FOREACH(_dll ${DL_DEBUG_DLLS})
		SET(DL_DEBUG_FLAGS "${DL_DEBUG_FLAGS} /DELAYLOAD:${_dll}.dll")
	ENDFOREACH()
	FOREACH(_dll ${DL_RELEASE_DLLS})
		SET(DL_RELEASE_FLAGS "${DL_RELEASE_FLAGS} /DELAYLOAD:${_dll}.dll")
	ENDFOREACH()

	# libgnuintl-8.dll is precompiled. (Release build only)
	IF(ENABLE_NLS)
		SET(DL_DEBUG_FLAGS "${DL_DEBUG_FLAGS} /DELAYLOAD:libgnuintl-8.dll")
		SET(DL_RELEASE_FLAGS "${DL_RELEASE_FLAGS} /DELAYLOAD:libgnuintl-8.dll")
	ENDIF(ENABLE_NLS)

	SET(CMAKE_EXE_LINKER_FLAGS_DEBUG    "${CMAKE_EXE_LINKER_FLAGS_DEBUG} ${DL_DEBUG_FLAGS}")
	SET(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} ${DL_DEBUG_FLAGS}")
	SET(CMAKE_MODULE_LINKER_FLAGS_DEBUG "${CMAKE_MODULE_LINKER_FLAGS_DEBUG} ${DL_DEBUG_FLAGS}")

	SET(CMAKE_EXE_LINKER_FLAGS_RELEASE    "${CMAKE_EXE_LINKER_FLAGS_RELEASE} ${DL_RELEASE_FLAGS}")
	SET(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} ${DL_RELEASE_FLAGS}")
	SET(CMAKE_MODULE_LINKER_FLAGS_RELEASE "${CMAKE_MODULE_LINKER_FLAGS_RELEASE} ${DL_RELEASE_FLAGS}")

	UNSET(DL_DEBUG_FLAGS)
	UNSET(DL_RELEASE_FLAGS)
	UNSET(DL_DLLS)
ENDIF(MSVC)
ENDMACRO(SET_DELAYLOAD_EXTLIB_FLAGS)

# Add a /DELAYLOAD flag for DLL(s).
# TODO: MinGW-w64 version.
FUNCTION(ADD_DELAYLOAD_FLAGS _target)
	IF(MSVC)
		FOREACH(arg IN LISTS ARGN)
			SET_PROPERTY(TARGET ${_target} APPEND_STRING PROPERTY LINK_FLAGS " /DELAYLOAD:${arg}")
		ENDFOREACH()
	ENDIF(MSVC)
ENDFUNCTION(ADD_DELAYLOAD_FLAGS)

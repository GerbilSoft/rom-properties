--- gettext-runtime/libasprintf/gnulib-lib/vasnprintf.h.orig  2023-05-19 00:19:37.000000000 -0400
+++ gettext-runtime/libasprintf/gnulib-lib/vasnprintf.h       2023-07-01 12:17:08.374266671 -0400
@@ -35,6 +35,8 @@
 extern "C" {
 #endif
 
+#if !defined(__USE_MINGW_ANSI_STDIO) && defined(__MINGW64_VERSION_MAJOR)
+
 /* Write formatted output to a string dynamically allocated with malloc().
    You can pass a preallocated buffer for the result in RESULTBUF and its
    size in *LENGTHP; otherwise you pass RESULTBUF = NULL.
@@ -63,6 +65,7 @@
 # define asnprintf rpl_asnprintf
 # define vasnprintf rpl_vasnprintf
 #endif
+
 extern char * asnprintf (char *restrict resultbuf, size_t *lengthp,
                          const char *format, ...)
        _GL_ATTRIBUTE_FORMAT ((_GL_ATTRIBUTE_SPEC_PRINTF_STANDARD, 3, 4));
@@ -70,6 +73,8 @@
                           const char *format, va_list args)
        _GL_ATTRIBUTE_FORMAT ((_GL_ATTRIBUTE_SPEC_PRINTF_STANDARD, 3, 0));
 
+#endif /* !defined(__USE_MINGW_ANSI_STDIO) && defined(__MINGW64_VERSION_MAJOR) */
+
 #ifdef __cplusplus
 }
 #endif
--- gettext-runtime/intl/gnulib-lib/vasnprintf.h.orig  2023-05-19 00:19:37.000000000 -0400
+++ gettext-runtime/intl/gnulib-lib/vasnprintf.h       2023-07-01 12:17:08.374266671 -0400
@@ -35,6 +35,8 @@
 extern "C" {
 #endif
 
+#if !defined(__USE_MINGW_ANSI_STDIO) && defined(__MINGW64_VERSION_MAJOR)
+
 /* Write formatted output to a string dynamically allocated with malloc().
    You can pass a preallocated buffer for the result in RESULTBUF and its
    size in *LENGTHP; otherwise you pass RESULTBUF = NULL.
@@ -63,6 +65,7 @@
 # define asnprintf rpl_asnprintf
 # define vasnprintf rpl_vasnprintf
 #endif
+
 extern char * asnprintf (char *restrict resultbuf, size_t *lengthp,
                          const char *format, ...)
        _GL_ATTRIBUTE_FORMAT ((_GL_ATTRIBUTE_SPEC_PRINTF_STANDARD, 3, 4));
@@ -70,6 +73,8 @@
                           const char *format, va_list args)
        _GL_ATTRIBUTE_FORMAT ((_GL_ATTRIBUTE_SPEC_PRINTF_STANDARD, 3, 0));
 
+#endif /* !defined(__USE_MINGW_ANSI_STDIO) && defined(__MINGW64_VERSION_MAJOR) */
+
 #ifdef __cplusplus
 }
 #endif
--- gettext-runtime/libasprintf/vasprintf.h.orig      2019-05-11 07:29:32.000000000 -0400
+++ gettext-runtime/libasprintf/vasprintf.h   2023-07-01 12:15:45.172287523 -0400
@@ -37,6 +37,8 @@
 extern "C" {
 #endif
 
+#if !defined(__USE_MINGW_ANSI_STDIO) && defined(__MINGW64_VERSION_MAJOR)
+
 /* Write formatted output to a string dynamically allocated with malloc().
    If the memory allocation succeeds, store the address of the string in
    *RESULT and return the number of resulting bytes, excluding the trailing
@@ -46,6 +48,8 @@
 extern int vasprintf (char **result, const char *format, va_list args)
        __attribute__ ((__format__ (__printf__, 2, 0)));
 
+#endif /* !defined(__USE_MINGW_ANSI_STDIO) && defined(__MINGW64_VERSION_MAJOR) */
+
 #ifdef __cplusplus
 }
 #endif
--- gettext-runtime/libasprintf/gnulib-lib/vasnprintf.c.orig   2023-06-12 13:34:50.000000000 -0400
+++ gettext-runtime/libasprintf/gnulib-lib/vasnprintf.c        2023-07-01 12:19:12.477235568 -0400
@@ -80,7 +80,14 @@
 #endif
 
 #include <locale.h>     /* localeconv() */
+#if defined(__MINGW64_VERSION_MAJOR) && defined(__USE_MINGW_ANSI_STDIO)
+#  define REMOVED__USE_MINGW_ANSI_STDIO
+#  undef __USE_MINGW_ANSI_STDIO
+#endif
 #include <stdio.h>      /* snprintf(), sprintf() */
+#if defined(__MINGW64_VERSION_MAJOR) && defined(REMOVED__USE_MINGW_ANSI_STDIO)
+#  define __USE_MINGW_ANSI_STDIO 1
+#endif
 #include <stdlib.h>     /* abort(), malloc(), realloc(), free() */
 #include <string.h>     /* memcpy(), strlen() */
 #include <wchar.h>      /* mbstate_t, mbrtowc(), mbrlen(), wcrtomb() */
--- gettext-runtime/intl/gnulib-lib/vasnprintf.c.orig   2023-06-12 13:34:50.000000000 -0400
+++ gettext-runtime/intl/gnulib-lib/vasnprintf.c        2023-07-01 12:19:12.477235568 -0400
@@ -80,7 +80,14 @@
 #endif
 
 #include <locale.h>     /* localeconv() */
+#if defined(__MINGW64_VERSION_MAJOR) && defined(__USE_MINGW_ANSI_STDIO)
+#  define REMOVED__USE_MINGW_ANSI_STDIO
+#  undef __USE_MINGW_ANSI_STDIO
+#endif
 #include <stdio.h>      /* snprintf(), sprintf() */
+#if defined(__MINGW64_VERSION_MAJOR) && defined(REMOVED__USE_MINGW_ANSI_STDIO)
+#  define __USE_MINGW_ANSI_STDIO 1
+#endif
 #include <stdlib.h>     /* abort(), malloc(), realloc(), free() */
 #include <string.h>     /* memcpy(), strlen() */
 #include <wchar.h>      /* mbstate_t, mbrtowc(), mbrlen(), wcrtomb() */
